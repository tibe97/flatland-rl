About to train 1 agents on (25,25) env.
Parameters:
max_num_cities: 2
max_rails_between_cities: 2
max_rails_in_city: 4
malfunction_rate: 0
max_duration: 50
min_duration: 20
num_episodes: 200
starting from episode: 0
max_steps: 404
eps_initial: 1
eps_decay_rate: 0.999
learning_rate: 0.02
learning_rate_decay: 0.5
done_reward: 0
deadlock_reward: -1000
batch_size: 128
/home/runnphoenix/work/flatland-rl/rainbow/model.py:252: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  x = nn.functional.softmax(self.layer3(x))
attention_0.att_l                                         (1, 4, 10)
attention_0.att_r                                         (1, 4, 10)
attention_0.bias                                               (40,)
attention_0.lin_l.weight                                    (40, 12)
attention_1.att_l                                         (1, 4, 10)
attention_1.att_r                                         (1, 4, 10)
attention_1.bias                                               (40,)
attention_1.lin_l.weight                                    (40, 40)
attention_2.att_l                                         (1, 4, 10)
attention_2.att_r                                         (1, 4, 10)
attention_2.bias                                               (40,)
attention_2.lin_l.weight                                    (40, 40)
out_att.att_l                                              (1, 1, 1)
out_att.att_r                                              (1, 1, 1)
out_att.bias                                                    (1,)
out_att.lin_l.weight                                         (1, 40)
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
filename is: test_results/
/home/runnphoenix/anaconda3/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:131: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
Ep: 1	 2 Agents on (25,25).	 Ep score -93.000	Avg Score: -0.230	 Env Dones so far: 100.00%	 Done Agents in ep: 100.00%	 In deadlock 0.00%(at switch 0)
		 Not started 0	 Eps: 0.86	EP ended at step: 156/404	Mean state_value: [-0.7769926]	 Epoch avg_loss: None
Ep: 2	 3 Agents on (25,25).	 Ep score -280.000	Avg Score: -0.686	 Env Dones so far: 0.00%	 Done Agents in ep: 33.33%	 In deadlock 0.00%(at switch 0)
		 Not started 0	 Eps: 0.57	EP ended at step: 412/408	Mean state_value: [-0.77363926]	 Epoch avg_loss: None
 [(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
[2 1 3]
tensor([0, 0, 1])
[0 2 3]
tensor([1, 0, 1])
[2 1 3]
tensor([1, 1, 0])
[(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
[2 1 3]
tensor([1, 0, 0])
[0 2 3]
tensor([0, 1, 1])
[2 1 3]
tensor([0, 0, 1])
[(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
[2 1 3]
tensor([1, 0, 0])
[0 2 3]
tensor([0, 1, 0])
[2 1 3]
tensor([1, 0, 1])
[(10, 15), (8, 17), (10, 16), (19, 4)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
[2 1 3]
tensor([0, 0, 0])
[2 0 3]
tensor([0, 1, 0])
[0 1 3]
tensor([0, 1, 1])
[(10, 15), (8, 17), (10, 16), (19, 4)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
[2 1 3]
tensor([0, 0, 0])
[2 0 3]
tensor([1, 0, 0])
[0 1 3]
tensor([0, 1, 1])
[(10, 14), (9, 17), (10, 15), (19, 3)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
[2 1 3]
tensor([0, 1, 0])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(10, 14), (9, 17), (10, 15), (19, 3)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
[2 1 3]
tensor([0, 1, 0])
[2 0 3]
tensor([1, 1, 0])
[0 1 3]
tensor([1, 1, 0])
[(10, 13), (9, 18), (10, 14), (19, 2)]
[[0, 6, 1, 20], [6, 0, 5, 26], [1, 5, 0, 21], [20, 26, 21, 0]]
[2 1 3]
tensor([1, 1, 0])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(10, 13), (9, 18), (10, 14), (19, 2)]
[[0, 6, 1, 20], [6, 0, 5, 26], [1, 5, 0, 21], [20, 26, 21, 0]]
[2 1 3]
tensor([1, 1, 0])
[2 0 3]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 0, 1])
[(9, 13), (9, 19), (10, 13), (18, 2)]
[[0, 6, 1, 20], [6, 0, 7, 26], [1, 7, 0, 19], [20, 26, 19, 0]]
[2 1 3]
tensor([0, 1, 0])
[0 2 3]
tensor([0, 0, 0])
[0 1 3]
tensor([1, 1, 1])
[(9, 13), (9, 19), (10, 13), (18, 2)]
[[0, 6, 1, 20], [6, 0, 7, 26], [1, 7, 0, 19], [20, 26, 19, 0]]
[2 1 3]
tensor([0, 1, 0])
[0 2 3]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(9, 12), (9, 20), (9, 13), (18, 1)]
[[0, 8, 1, 20], [8, 0, 7, 28], [1, 7, 0, 21], [20, 28, 21, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 1])
[(9, 12), (9, 20), (9, 13), (18, 1)]
[[0, 8, 1, 20], [8, 0, 7, 28], [1, 7, 0, 21], [20, 28, 21, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 0, 0])
[(9, 11), (9, 21), (9, 12), (18, 0)]
[[0, 10, 1, 20], [10, 0, 9, 30], [1, 9, 0, 21], [20, 30, 21, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 1, 1])
[(9, 11), (9, 21), (9, 12), (18, 0)]
[[0, 10, 1, 20], [10, 0, 9, 30], [1, 9, 0, 21], [20, 30, 21, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 1, 0])
[0 1 3]
tensor([1, 1, 1])
[(9, 10), (10, 21), (9, 11), (17, 0)]
[[0, 12, 1, 18], [12, 0, 11, 28], [1, 11, 0, 19], [18, 28, 19, 0]]
[2 1 3]
tensor([0, 1, 1])
[2 0 3]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 1, 1])
[(9, 10), (10, 21), (9, 11), (17, 0)]
[[0, 12, 1, 18], [12, 0, 11, 28], [1, 11, 0, 19], [18, 28, 19, 0]]
[2 1 3]
tensor([0, 1, 1])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(10, 10), (11, 21), (10, 11), (16, 0)]
[[0, 12, 1, 16], [12, 0, 11, 26], [1, 11, 0, 17], [16, 26, 17, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 0, 0])
[0 1 3]
tensor([0, 0, 1])
[(10, 10), (11, 21), (10, 11), (16, 0)]
[[0, 12, 1, 16], [12, 0, 11, 26], [1, 11, 0, 17], [16, 26, 17, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(11, 10), (12, 21), (11, 11), (15, 0)]
[[0, 12, 1, 14], [12, 0, 11, 24], [1, 11, 0, 15], [14, 24, 15, 0]]
[2 1 3]
tensor([0, 0, 0])
[2 0 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(11, 10), (12, 21), (11, 11), (15, 0)]
[[0, 12, 1, 14], [12, 0, 11, 24], [1, 11, 0, 15], [14, 24, 15, 0]]
[2 1 3]
tensor([0, 0, 0])
[2 0 3]
tensor([1, 0, 0])
[0 1 3]
tensor([1, 0, 0])
[(12, 10), (13, 21), (12, 11), (14, 0)]
[[0, 12, 1, 12], [12, 0, 11, 22], [1, 11, 0, 13], [12, 22, 13, 0]]
[2 1 3]
tensor([1, 0, 1])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(12, 10), (13, 21), (12, 11), (14, 0)]
[[0, 12, 1, 12], [12, 0, 11, 22], [1, 11, 0, 13], [12, 22, 13, 0]]
[2 1 3]
tensor([1, 0, 1])
[2 0 3]
tensor([0, 0, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 10), (14, 21), (13, 11), (13, 0)]
[[0, 12, 1, 10], [12, 0, 11, 22], [1, 11, 0, 11], [10, 22, 11, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 10), (14, 21), (13, 11), (13, 0)]
[[0, 12, 1, 10], [12, 0, 11, 22], [1, 11, 0, 11], [10, 22, 11, 0]]
[2 1 3]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 0, 1])
[0 1 3]
tensor([0, 0, 0])
[(13, 9), (14, 20), (14, 11), (13, 1)]
[[0, 12, 3, 8], [12, 0, 9, 20], [3, 9, 0, 11], [8, 20, 11, 0]]
[2 1 3]
tensor([1, 0, 0])
[2 0 3]
tensor([0, 0, 0])
[0 1 3]
tensor([1, 0, 1])
[(13, 9), (14, 20), (14, 11), (13, 1)]
[[0, 12, 3, 8], [12, 0, 9, 20], [3, 9, 0, 11], [8, 20, 11, 0]]
[2 1 3]
tensor([1, 0, 0])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 8), (14, 19), (15, 11), (13, 2)]
[[0, 12, 5, 6], [12, 0, 9, 18], [5, 9, 0, 11], [6, 18, 11, 0]]
[2 1 3]
tensor([1, 0, 0])
[2 0 3]
tensor([0, 1, 0])
[0 1 3]
tensor([0, 1, 1])
[(13, 8), (14, 19), (15, 11), (13, 2)]
[[0, 12, 5, 6], [12, 0, 9, 18], [5, 9, 0, 11], [6, 18, 11, 0]]
[2 1 3]
tensor([1, 0, 0])
[2 0 3]
tensor([1, 1, 0])
[0 1 3]
tensor([1, 0, 1])
[(13, 7), (14, 18), (16, 11), (13, 3)]
[[0, 12, 7, 4], [12, 0, 9, 16], [7, 9, 0, 11], [4, 16, 11, 0]]
[3 2 1]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 7), (14, 18), (16, 11), (13, 3)]
[[0, 12, 7, 4], [12, 0, 9, 16], [7, 9, 0, 11], [4, 16, 11, 0]]
[3 2 1]
tensor([1, 1, 1])
[2 0 3]
tensor([0, 0, 0])
[0 1 3]
tensor([0, 1, 1])
[(13, 6), (14, 17), (17, 11), (13, 4)]
[[0, 12, 9, 2], [12, 0, 9, 14], [9, 9, 0, 11], [2, 14, 11, 0]]
[3 2 1]
tensor([0, 1, 1])
[2 0 3]
tensor([1, 1, 1])
[1 0 3]
tensor([1, 0, 1])
[(13, 6), (14, 17), (17, 11), (13, 4)]
[[0, 12, 9, 2], [12, 0, 9, 14], [9, 9, 0, 11], [2, 14, 11, 0]]
[3 2 1]
tensor([0, 1, 1])
[2 0 3]
tensor([0, 1, 1])
[1 0 3]
tensor([1, 1, 1])
[(13, 5), (14, 16), (18, 11), (13, 4)]
[[0, 12, 11, 1], [12, 0, 9, 13], [11, 9, 0, 12], [1, 13, 12, 0]]
[3 2 1]
tensor([0, 1, 1])
[2 0 3]
tensor([0, 0, 1])
[1 0 3]
tensor([1, 0, 1])
[(13, 5), (14, 16), (18, 11), (13, 4)]
[[0, 12, 11, 1], [12, 0, 9, 13], [11, 9, 0, 12], [1, 13, 12, 0]]
[3 2 1]
tensor([0, 1, 1])
[2 0 3]
tensor([0, 1, 0])
[1 0 3]
tensor([0, 1, 1])
[(13, 5), (14, 15), (18, 10), (13, 4)]
[[0, 11, 10, 1], [11, 0, 9, 12], [10, 9, 0, 11], [1, 12, 11, 0]]
[3 2 1]
tensor([1, 1, 0])
[2 0 3]
tensor([1, 0, 1])
[1 0 3]
tensor([0, 1, 1])
[(13, 5), (14, 15), (18, 10), (13, 4)]
[[0, 11, 10, 1], [11, 0, 9, 12], [10, 9, 0, 11], [1, 12, 11, 0]]
[3 2 1]
tensor([1, 1, 0])
[2 0 3]
tensor([0, 0, 1])
[1 0 3]
tensor([1, 1, 0])
[(13, 5), (14, 14), (18, 9), (13, 4)]
[[0, 10, 9, 1], [10, 0, 9, 11], [9, 9, 0, 10], [1, 11, 10, 0]]
[3 2 1]
tensor([0, 0, 0])
[2 0 3]
tensor([1, 1, 0])
[1 0 3]
tensor([0, 0, 1])
[(13, 5), (14, 14), (18, 9), (13, 4)]
[[0, 10, 9, 1], [10, 0, 9, 11], [9, 9, 0, 10], [1, 11, 10, 0]]
[3 2 1]
tensor([0, 0, 0])
[2 0 3]
tensor([0, 1, 1])
[1 0 3]
tensor([1, 1, 0])
[(13, 5), (14, 13), (18, 8), (13, 4)]
[[0, 9, 8, 1], [9, 0, 9, 10], [8, 9, 0, 9], [1, 10, 9, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 1, 0])
[0 1 3]
tensor([0, 0, 0])
[(13, 5), (14, 13), (18, 8), (13, 4)]
[[0, 9, 8, 1], [9, 0, 9, 10], [8, 9, 0, 9], [1, 10, 9, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (14, 12), (18, 7), (13, 4)]
[[0, 8, 7, 1], [8, 0, 9, 9], [7, 9, 0, 8], [1, 9, 8, 0]]
[3 2 1]
tensor([1, 0, 1])
[0 2 3]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (14, 12), (18, 7), (13, 4)]
[[0, 8, 7, 1], [8, 0, 9, 9], [7, 9, 0, 8], [1, 9, 8, 0]]
[3 2 1]
tensor([1, 0, 1])
[0 2 3]
tensor([1, 0, 0])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (14, 11), (18, 6), (13, 4)]
[[0, 7, 6, 1], [7, 0, 9, 8], [6, 9, 0, 7], [1, 8, 7, 0]]
[3 2 1]
tensor([0, 1, 0])
[0 2 3]
tensor([0, 0, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (14, 11), (18, 6), (13, 4)]
[[0, 7, 6, 1], [7, 0, 9, 8], [6, 9, 0, 7], [1, 8, 7, 0]]
[3 2 1]
tensor([0, 1, 0])
[0 2 3]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (14, 10), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 10, 7], [14, 10, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[0 2 3]
tensor([0, 1, 0])
[1 0 3]
tensor([1, 1, 1])
[(13, 5), (14, 10), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 10, 7], [14, 10, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[0 2 3]
tensor([1, 1, 1])
[1 0 3]
tensor([1, 1, 1])
[(13, 5), (15, 10), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 11, 8], [14, 11, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 0, 0])
[0 2 3]
tensor([0, 0, 0])
[1 0 3]
tensor([1, 0, 0])
[(13, 5), (15, 10), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 11, 8], [14, 11, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 0, 0])
[0 2 3]
tensor([1, 0, 1])
[1 0 3]
tensor([0, 0, 0])
[(13, 5), (16, 10), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 12, 9], [14, 12, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([0, 0, 0])
[0 2 3]
tensor([1, 1, 1])
[1 0 3]
tensor([0, 1, 1])
[(13, 5), (16, 10), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 12, 9], [14, 12, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([0, 0, 0])
[0 2 3]
tensor([1, 1, 1])
[1 0 3]
tensor([0, 1, 0])
[(13, 5), (17, 10), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 13, 10], [14, 13, 0, 15], [1, 10, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([0, 1, 1])
[1 0 3]
tensor([1, 0, 1])
[(13, 5), (17, 10), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 13, 10], [14, 13, 0, 15], [1, 10, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 1, 1])
[1 0 3]
tensor([0, 0, 1])
[(13, 5), (18, 10), (10, 16), (13, 4)]
[[0, 10, 14, 1], [10, 0, 14, 11], [14, 14, 0, 15], [1, 11, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[0 2 3]
tensor([0, 1, 1])
[1 0 3]
tensor([1, 0, 1])
[(13, 5), (18, 10), (10, 16), (13, 4)]
[[0, 10, 14, 1], [10, 0, 14, 11], [14, 14, 0, 15], [1, 11, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[0 2 3]
tensor([1, 0, 1])
[1 0 3]
tensor([1, 0, 1])
[(13, 5), (18, 9), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 15, 10], [14, 15, 0, 15], [1, 10, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([0, 0, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (18, 9), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 15, 10], [14, 15, 0, 15], [1, 10, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([0, 0, 0])
[0 1 3]
tensor([0, 1, 0])
[(13, 5), (18, 8), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 16, 9], [14, 16, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 1, 0])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (18, 8), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 16, 9], [14, 16, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (18, 7), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 17, 8], [14, 17, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([0, 1, 0])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (18, 7), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 17, 8], [14, 17, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (18, 6), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 18, 7], [14, 18, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 0, 0])
[0 1 3]
tensor([0, 1, 1])
[(13, 5), (18, 6), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 18, 7], [14, 18, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[0 2 3]
tensor([1, 0, 0])
[0 1 3]
tensor([0, 1, 1])
[(13, 5), (17, 6), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 17, 6], [14, 17, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[0 2 3]
tensor([0, 1, 0])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (17, 6), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 17, 6], [14, 17, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[0 2 3]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (17, 5), (10, 16), (13, 4)]
[[0, 4, 14, 1], [4, 0, 18, 5], [14, 18, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 1, 0])
[0 2 3]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (17, 5), (10, 16), (13, 4)]
[[0, 4, 14, 1], [4, 0, 18, 5], [14, 18, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 1, 0])
[0 2 3]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(13, 5), (17, 4), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 19, 4], [14, 19, 0, 15], [1, 4, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (17, 4), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 19, 4], [14, 19, 0, 15], [1, 4, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (18, 4), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 20, 5], [14, 20, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 1, 0])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (18, 4), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 20, 5], [14, 20, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 1, 0])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (18, 3), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 21, 6], [14, 21, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 0, 0])
[3 2 0]
tensor([1, 1, 0])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (18, 3), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 21, 6], [14, 21, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 0, 0])
[3 2 0]
tensor([0, 1, 0])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (18, 2), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 22, 7], [14, 22, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (18, 2), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 22, 7], [14, 22, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 1])
[(13, 5), (18, 1), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 23, 8], [14, 23, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([0, 0, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (18, 1), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 23, 8], [14, 23, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (18, 0), (10, 16), (13, 4)]
[[0, 10, 14, 1], [10, 0, 24, 9], [14, 24, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 0])
[(13, 5), (18, 0), (10, 16), (13, 4)]
[[0, 10, 14, 1], [10, 0, 24, 9], [14, 24, 0, 15], [1, 9, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (17, 0), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 23, 8], [14, 23, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (17, 0), (10, 16), (13, 4)]
[[0, 9, 14, 1], [9, 0, 23, 8], [14, 23, 0, 15], [1, 8, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (16, 0), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 22, 7], [14, 22, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([0, 1, 1])
[(13, 5), (16, 0), (10, 16), (13, 4)]
[[0, 8, 14, 1], [8, 0, 22, 7], [14, 22, 0, 15], [1, 7, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 0, 1])
[(13, 5), (15, 0), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 21, 6], [14, 21, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (15, 0), (10, 16), (13, 4)]
[[0, 7, 14, 1], [7, 0, 21, 6], [14, 21, 0, 15], [1, 6, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (14, 0), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 20, 5], [14, 20, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (14, 0), (10, 16), (13, 4)]
[[0, 6, 14, 1], [6, 0, 20, 5], [14, 20, 0, 15], [1, 5, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 0, 0])
[0 1 3]
tensor([0, 1, 0])
[(13, 5), (13, 0), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 19, 4], [14, 19, 0, 15], [1, 4, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (13, 0), (10, 16), (13, 4)]
[[0, 5, 14, 1], [5, 0, 19, 4], [14, 19, 0, 15], [1, 4, 15, 0]]
[3 2 1]
tensor([0, 0, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 1, 0])
[(13, 5), (13, 1), (10, 16), (13, 4)]
[[0, 4, 14, 1], [4, 0, 18, 3], [14, 18, 0, 15], [1, 3, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 1, 0])
[0 1 3]
tensor([0, 1, 1])
[(13, 5), (13, 1), (10, 16), (13, 4)]
[[0, 4, 14, 1], [4, 0, 18, 3], [14, 18, 0, 15], [1, 3, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 1, 0])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (13, 2), (10, 16), (13, 4)]
[[0, 3, 14, 1], [3, 0, 17, 2], [14, 17, 0, 15], [1, 2, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([0, 0, 1])
[(13, 5), (13, 2), (10, 16), (13, 4)]
[[0, 3, 14, 1], [3, 0, 17, 2], [14, 17, 0, 15], [1, 2, 15, 0]]
[3 2 1]
tensor([1, 0, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 0, 1])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([0, 1, 0])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 0])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 0, 0])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([1, 0, 0])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([1, 0, 0])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([1, 0, 1])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([1, 0, 1])
[0 1 3]
tensor([0, 0, 0])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([1, 1, 0])
[0 1 3]
tensor([0, 0, 0])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([0, 1, 1])
[3 2 0]
tensor([0, 1, 1])
[0 1 3]
tensor([1, 1, 0])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
[3 2 0]
tensor([1, 1, 1])
[0 1 3]
tensor([1, 1, 1])
[(13, 5), (13, 3), (10, 16), (13, 4)]
[[0, 2, 14, 1], [2, 0, 16, 1], [14, 16, 0, 15], [1, 1, 15, 0]]
[3 2 1]
tensor([1, 1, 1])
Traceback (most recent call last):
  File "train.py", line 472, in <module>
  File "train.py", line 282, in main
  File "train.py", line 277, in infer_acts
    actions_[j] = q_action[j][1]
  File "/home/runnphoenix/work/flatland-rl/rainbow/dueling_double_dqn.py", line 202, in act
    handle, path = batch_list[batch_index].graph_info
KeyboardInterrupt