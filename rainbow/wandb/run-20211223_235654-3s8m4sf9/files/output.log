About to train 1 agents on (25,25) env.
Parameters:
max_num_cities: 2
max_rails_between_cities: 2
max_rails_in_city: 4
malfunction_rate: 0
max_duration: 50
min_duration: 20
num_episodes: 200
starting from episode: 0
max_steps: 404
eps_initial: 1
eps_decay_rate: 0.999
learning_rate: 0.02
learning_rate_decay: 0.5
done_reward: 0
deadlock_reward: -1000
batch_size: 128
/home/runnphoenix/work/flatland-rl/rainbow/model.py:252: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  x = nn.functional.softmax(self.layer3(x))
attention_0.att_l                                         (1, 4, 10)
attention_0.att_r                                         (1, 4, 10)
attention_0.bias                                               (40,)
attention_0.lin_l.weight                                    (40, 12)
attention_1.att_l                                         (1, 4, 10)
attention_1.att_r                                         (1, 4, 10)
attention_1.bias                                               (40,)
attention_1.lin_l.weight                                    (40, 40)
attention_2.att_l                                         (1, 4, 10)
attention_2.att_r                                         (1, 4, 10)
attention_2.bias                                               (40,)
attention_2.lin_l.weight                                    (40, 40)
out_att.att_l                                              (1, 1, 1)
out_att.att_r                                              (1, 1, 1)
out_att.bias                                                    (1,)
out_att.lin_l.weight                                         (1, 40)
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
DEPRECATED - RailEnv arg: malfunction_and_process_data - use malfunction_generator
filename is: test_results/
Ep: 1	 2 Agents on (25,25).	 Ep score -93.000	Avg Score: -0.230	 Env Dones so far: 100.00%	 Done Agents in ep: 100.00%	 In deadlock 0.00%(at switch 0)
		 Not started 0	 Eps: 0.86	EP ended at step: 156/404	Mean state_value: [-0.09514864]	 Epoch avg_loss: None
/home/runnphoenix/anaconda3/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:131: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
Ep: 2	 3 Agents on (25,25).	 Ep score -23.667	Avg Score: -0.058	 Env Dones so far: 100.00%	 Done Agents in ep: 100.00%	 In deadlock 0.00%(at switch 0)
		 Not started 0	 Eps: 0.83	EP ended at step: 32/408	Mean state_value: [0.07392262]	 Epoch avg_loss: None
 [(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
[(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
neighbors: [2 1 3]
actions: tensor([0, 1, 1, 1])
neigh_actions:tensor([1, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
[(10, 16), (8, 16), (10, 16), (19, 5)]
[[0, 2, 0, 20], [2, 0, 2, 22], [0, 2, 0, 20], [20, 22, 20, 0]]
neighbors: [2 1 3]
actions: tensor([0, 1, 1, 1])
neigh_actions:tensor([1, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 0])
neigh_actions:tensor([1, 1, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
[(10, 15), (8, 17), (10, 16), (19, 4)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 0])
neigh_actions:tensor([1, 1, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
[(10, 15), (8, 17), (10, 16), (19, 4)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
[(10, 14), (9, 17), (10, 15), (19, 3)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
[(10, 14), (9, 17), (10, 15), (19, 3)]
[[0, 4, 1, 20], [4, 0, 3, 24], [1, 3, 0, 21], [20, 24, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
[(10, 13), (9, 18), (10, 14), (19, 2)]
[[0, 6, 1, 20], [6, 0, 5, 26], [1, 5, 0, 21], [20, 26, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
[(10, 13), (9, 18), (10, 14), (19, 2)]
[[0, 6, 1, 20], [6, 0, 5, 26], [1, 5, 0, 21], [20, 26, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 0])
neigh_actions:tensor([1, 1, 0])
[(9, 13), (10, 18), (10, 13), (18, 2)]
[[0, 6, 1, 20], [6, 0, 5, 24], [1, 5, 0, 19], [20, 24, 19, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([0, 1, 1, 1])
neigh_actions:tensor([1, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
[(9, 13), (10, 18), (10, 13), (18, 2)]
[[0, 6, 1, 20], [6, 0, 5, 24], [1, 5, 0, 19], [20, 24, 19, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 1])
neigh_actions:tensor([1, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 1, 1])
neigh_actions:tensor([1, 1, 1])
[(9, 12), (10, 19), (9, 13), (18, 1)]
[[0, 8, 1, 20], [8, 0, 7, 26], [1, 7, 0, 21], [20, 26, 21, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
[(9, 12), (10, 19), (9, 13), (18, 1)]
[[0, 8, 1, 20], [8, 0, 7, 26], [1, 7, 0, 21], [20, 26, 21, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
Traceback (most recent call last):
  File "train.py", line 471, in <module>
    main(args)
  File "train.py", line 300, in main
    _, _, next_q_values = infer_acts(next_states, actions)
  File "train.py", line 276, in infer_acts
    q_action = ep_controller.rl_agent.act(state, mean_fields[j])
  File "/home/runnphoenix/work/flatland-rl/rainbow/dueling_double_dqn.py", line 188, in act
    out_value = self.qnetwork_value_local(batch.x, batch.edge_index)
  File "/home/runnphoenix/anaconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 731, in _call_impl
    hook_result = hook(self, input, result)
  File "/home/runnphoenix/anaconda3/lib/python3.8/site-packages/wandb/wandb_torch.py", line 123, in <lambda>
    lambda mod, inp, outp: parameter_log_hook(
  File "/home/runnphoenix/anaconda3/lib/python3.8/site-packages/wandb/wandb_torch.py", line 119, in parameter_log_hook
    self.log_tensor_stats(data.cpu(), "parameters/" + prefix + name)
  File "/home/runnphoenix/anaconda3/lib/python3.8/site-packages/wandb/wandb_torch.py", line 237, in log_tensor_stats
    bins = torch.linspace(tmin, tmax, steps=self._num_bins + 1)
KeyboardInterrupt
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
[(9, 11), (9, 19), (9, 12), (18, 0)]
[[0, 8, 1, 20], [8, 0, 7, 28], [1, 7, 0, 21], [20, 28, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
[(9, 11), (9, 19), (9, 12), (18, 0)]
[[0, 8, 1, 20], [8, 0, 7, 28], [1, 7, 0, 21], [20, 28, 21, 0]]
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
[(10, 11), (9, 20), (9, 11), (17, 0)]
[[0, 10, 1, 18], [10, 0, 9, 28], [1, 9, 0, 19], [18, 28, 19, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 0])
neigh_actions:tensor([1, 1, 0])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
[(10, 11), (9, 20), (9, 11), (17, 0)]
[[0, 10, 1, 18], [10, 0, 9, 28], [1, 9, 0, 19], [18, 28, 19, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
[(11, 11), (9, 21), (10, 11), (16, 0)]
[[0, 12, 1, 16], [12, 0, 11, 28], [1, 11, 0, 17], [16, 28, 17, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
[(11, 11), (9, 21), (10, 11), (16, 0)]
[[0, 12, 1, 16], [12, 0, 11, 28], [1, 11, 0, 17], [16, 28, 17, 0]]
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
neighbors: [2 1 3]
actions: tensor([1, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
[(12, 11), (10, 21), (11, 11), (15, 0)]
[[0, 12, 1, 14], [12, 0, 11, 26], [1, 11, 0, 15], [14, 26, 15, 0]]
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 0, 0, 0])
neigh_actions:tensor([0, 0, 0])
[(12, 11), (10, 21), (11, 11), (15, 0)]
[[0, 12, 1, 14], [12, 0, 11, 26], [1, 11, 0, 15], [14, 26, 15, 0]]
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
[(13, 11), (11, 21), (12, 11), (14, 0)]
[[0, 12, 1, 12], [12, 0, 11, 24], [1, 11, 0, 13], [12, 24, 13, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 0])
neigh_actions:tensor([0, 1, 0])
[(13, 11), (11, 21), (12, 11), (14, 0)]
[[0, 12, 1, 12], [12, 0, 11, 24], [1, 11, 0, 13], [12, 24, 13, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 1])
neigh_actions:tensor([1, 0, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 0, 1])
neigh_actions:tensor([0, 1, 1])
neighbors: [2 1 3]
actions: tensor([1, 1, 1, 0])
neigh_actions:tensor([1, 1, 0])
[(14, 11), (12, 21), (13, 11), (13, 0)]
[[0, 12, 1, 12], [12, 0, 11, 22], [1, 11, 0, 11], [12, 22, 11, 0]]
neighbors: [2 1 3]
actions: tensor([0, 0, 0, 1])
neigh_actions:tensor([0, 0, 1])
neighbors: [2 1 3]
actions: tensor([0, 0, 1, 0])
neigh_actions:tensor([1, 0, 0])